generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         String      @id @default(cuid())
  title      String
  price      String
  images     String[]
  address    String
  city       String
  type       Type
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  postDetail PostDetail?
  savedPost  SavedPost[]

  review Review[]
}

enum Type {
  buy
  rent
}

model PostDetail {
  id          String   @id @default(cuid())
  description String
  amenities   String[]
  nearby      String[]
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String   @unique
}

model SavedPost {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Composite unique constraint
}

model User {
  id             String      @id @default(cuid())
  username       String
  email          String      @unique
  password       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  profilePicture String?
  savedPost      SavedPost[]
  posts          Post[]
  review         Review[]
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  postId    String

  // Composite unique constraint
}
